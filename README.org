#+TITLE: Dan's Emacs Config
#+AUTHOR: Daniel Biasiotto
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp    :tangle "~/.config/emacs/init.el" :results silent

* Configuration
** About this file
   :PROPERTIES:
   :CUSTOM_ID: babel-init
   :END:
<<babel-init>>

This is a literate config tangled to emacs's =init.el= file.
Great sources for this kind of goodness are:
- [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua's Emacs]]
- [[https://github.com/joseph8th/literatemacs/blob/master/README.org][LiteratEmacs]]

** Personal information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Daniel Biasiotto"
      user-mail-address "d.b@disroot.org")
#+END_SRC

** Backups

This is one of the things people usually want to change right away.
By default, Emacs saves backup files in the current directory.
These are the files ending in =~= that are cluttering up your directory lists.
The following code stashes them all in =~/.config/emacs/backups=,
where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))
#+END_SRC#

** Emacs Service
#+BEGIN_EXAMPLE
n[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=simple
ExecStart=/usr/bin/emacs --fg-daemon
ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure

[Install]
WantedBy=default.target
#+END_EXAMPLE
In =~/.config/systemd/user/emacs.service=

** Initialize
Stuff to do on startup
#+BEGIN_SRC emacs-lisp
        ;; Path to nano emacs modules (mandatory)
  (add-to-list 'load-path "~/.config/emacs/config/nano-emacs")
  (add-to-list 'load-path "~/.config/emacs/config")
  (add-to-list 'load-path ".")

  (require 'simpleclip)
  (simpleclip-mode 1)
;; Press super-c to copy without affecting the kill ring.
;; Press super-x or super-v to cut or paste.
#+END_SRC

** Command Line Options
#+BEGIN_SRC emacs-lisp
;; Theming Command line options (this will cancel warning messages)
(add-to-list 'command-switch-alist '("-dark"   . (lambda (args))))
(add-to-list 'command-switch-alist '("-light"  . (lambda (args))))
(add-to-list 'command-switch-alist '("-default"  . (lambda (args))))

(cond
 ((member "-default" command-line-args) t)
 ((member "-dark" command-line-args) (require 'nano-theme-dark))
 (t (require 'nano-theme-dark)))
#+END_SRC

** Custom Settings in its file
Keep custom setting in a separate file to not pollute =init.el=
#+BEGIN_SRC emacs-lisp
(let* ((this-file  (or load-file-name (buffer-file-name)))
       (this-dir  (file-name-directory this-file))
       (custom-path  (concat this-dir "custom.el")))
  (when (and (eq nil user-init-file)
     (eq nil custom-file)
     (file-exists-p custom-path))
    (setq user-init-file this-file)
    (setq custom-file custom-path)
    (load custom-file)))
#+END_SRC

** Package Source and Setup
Disabling ~package-enable-at-startup~ will make startup a little quicker
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-check-signature nil)  ; because GNU ELPA keeps choking on the sigs
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap use-package
#+BEGIN_SRC emacs-lisp
; Bootstrap use-package
(unless (package-installed-p 'use-package)
 (package-refresh-contents)
 (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(eval-when-compile (require 'use-package))
(use-package auto-compile
 :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

** Increase garbage collector
Nice little tidbit copied directly from Jamie Collinson's config.
Bumps startup speed.

#+BEGIN_SRC emacs-lisp
;; Increase garbage collection during startup
(setq gc-cons-threshold 10000000)
;; Restore after startup
(add-hook 'after-init-hook
      (lambda ()
    (setq gc-cons-threshold 1000000)
    (message "gc-cons-threshold restored to %S"
         gc-cons-threshold)))
#+END_SRC

** Nuke Whitespace
For cleaner files
#+BEGIN_SRC emacs-lisp
;; Remove useless whitespace before saving a file
(setq-default nuke-trailing-whitespace-p t)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
#+END_SRC

** Look
Remember to run ~M-x all-the-icons-install-fonts~
#+BEGIN_SRC emacs-lisp
;; Did you run all-the-icons-install-fonts?
(use-package all-the-icons)

;; Set the default face
(set-face-attribute 'default nil :font "Iosevka" :height 85)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Iosevka" :height 85)
#+END_SRC

Set =preferences= and Highlight corresponding =parentheses=
#+BEGIN_SRC emacs-lisp
;(setq-default line-spacing 0)
(set-face-background 'show-paren-match "wheat")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode)

;; Window layout (optional)
(require 'nano-layout)
#+END_SRC

*** Theme and Modeline
#+BEGIN_SRC emacs-lisp
    ;; Theme
    (require 'nano-faces)
    (nano-faces)
    (require 'nano-theme)
    (nano-theme)
#+END_SRC
Modeline in from =NΛNO-Emacs=, hacked to show time and battery
#+BEGIN_SRC emacs-lisp
     ;; Nano header & mode lines (optional)
     (require 'time)
     (require 'battery)
     (setq system-time-locale "C") ;; show english even LANG to zh_CN.UTF-8
     ;(display-time)
     (display-battery-mode)
     (setq battery-mode-line-format "%b%p%%" ;; sml would override it, Format is:[%L %b%p%% %t]
       battery-update-interval 5)
     (require 'nano-modeline)
     (setq inihibit-startup-message nil)
#+END_SRC

*** Startup screen
#+BEGIN_SRC emacs-lisp
        (use-package dashboard
          :ensure t
          :config
          (dashboard-setup-startup-hook)
          :custom
          (dashboard-center-content t)
          (dashboard-show-shortcuts nil)
          (dashboard-startup-banner "~/Pictures/misc/undertale.png")
          (dashboard-banner-logo-title "Hello There")
          (dashboard-set-headings-icons t)
          (dashboard-set-file-icons t)
          (dashboard-set-footer nil)
          (dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 9)))
          (dashboard-org-agenda-categories '("Tasks" "Appointments")))

        (setq initial-buffer-choice
              (lambda () (switch-to-buffer "*dashboard*")))
#+END_SRC
*** Line Numbers
Good loking line numbers, currently using the position widget on ~nano-modeline~ though.
#+BEGIN_SRC emacs-lisp
  ;; Line numbers
  (require 'display-line-numbers)
  (defun y/line-numbers--face(&optional theme-unused  no-confirm-unused
                  no-enable-unused)
         "Line numbers config."
         (interactive)
         (setq display-line-numbers-grow-only t)
         (set-face-attribute 'line-number nil
                 :inherit 'linum
                 :height 70
                 :weight 'medium
                 :slant 'italic
                 :foreground "#495057")
         (set-face-attribute 'line-number-current-line nil
                 :inherit 'line-number
                 :foreground "#868E96"))

  ;; advice after load-theme because theme will reset it
  (advice-add 'load-theme :after #'y/line-numbers--face)
  ;; run directly if no load-theme explicitly
  (y/line-numbers--face)
  ;;(add-hook 'after-change-major-mode-hook #'display-line-numbers-mode)
#+END_SRC

*** NΛNO Emacs
[[https://github.com/rougier/nano-emacs][Nice]].
#+BEGIN_SRC emacs-lisp
  ;; Nano default settings (optional)
  (require 'nano-defaults)

  ;; Nano session saving (optional)
  (require 'nano-session)

  ;; Nano key bindings modification (optional)
  (require 'nano-bindings)

  ;; Nano counsel configuration (optional)
  ;; Needs "counsel" package to be installed (M-x: package-install)
  (require 'nano-counsel)

  ;; Welcome message (optional)
  (let ((inhibit-message t))
    (message "Welcome to GNU Emacs / N Λ N O edition")
    (message (format "Initialization time: %s" (emacs-init-time))))

  ;; Splash (optional)
  ;(unless (member "-no-splash" command-line-args)
  ;  (require 'nano-splash))

  ;; Help (optional)
  (add-to-list 'command-switch-alist '("-no-help" . (lambda (args))))
  (unless (member "-no-help" command-line-args)
    (require 'nano-help))
(require 'nano-command)
(provide 'nano)
(menu-bar-mode -1)
#+END_SRC

** Org Mode
#+BEGIN_SRC emacs-lisp
(load "nano-writer.el")
;(use-package writer-mode
;  :custom
;  (setq
;   org-ellipsis " ▾ "
;   org-hide-leading-stars t
;   org-priority-highest ?A
;   org-priority-lowest ?E))

(defvar-local journal-file-path "~/Documents/org/roam/BulletJournal.org")
(use-package org
    ;:hook
    ;(org-mode . company-latex-commands)
    :custom
    (setq org-directory "~/Documents/org"
          org-ellipsis " ▾ "
          org-hide-leading-stars t
          org-priority-highest ?A
          org-priority-lowest ?E
          org-priority-faces
          '((?A . 'all-the-icons-red)
            (?B . 'all-the-icons-orange)
            (?C . 'all-the-icons-yellow)
            (?D . 'all-the-icons-green)
            (?E . 'all-the-icons-blue))
          org-todo-keywords
          '((sequence "TODO(t)" "DOING(d)" "TBR(r)"
                      "|" "READ(R)" "DONE(D)"))))
#+END_SRC
Ligatures
- [] Check

#+BEGIN_SRC emacs-lisp
  ;; For nice locking checkboxes
  (setq org-html-checkbox-type 'unicode)
  (setq org-html-checkbox-types
   '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
              (off . "<span class=\"task-todo\">&#x2610;</span>")
              (trans . "<span class=\"task-in-progress\">[-]</span>"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org)
  (append +ligatures-extra-symbols
          `(:checkbox      "☐"
            :pending       "◼"
            :checkedbox    "☑"
            :list_property "∷"
            :em_dash       "—"
            :ellipses      "…"
            :title         "𝙏"
            :subtitle      "𝙩"
            :author        "𝘼"
            :date          "𝘿"
            :property      "☸"
            :options       "⌥"
            :latex_class   "🄲"
            :latex_header  "⇥"
            :beamer_header "↠"
            :attr_latex    "🄛"
            :attr_html     "🄗"
            :begin_quote   "❮"
            :end_quote     "❯" ))

    (set-ligatures! 'org-mode
                     :merge t
                     :checkbox      "[ ]"
                     :pending       "[-]"
                     :checkedbox    "[X]"
                     :list_property "::"
                     :em_dash       "---"
                     :ellipsis      "..."
                     :title         "#+title:"
                     :subtitle      "#+subtitle:"
                     :author        "#+author:"
                     :date          "#+date:"
                     :property      "#+property:"
                     :options       "#+options:"
                     :latex_class   "#+latex_class:"
                     :latex_header  "#+latex_header:"
                     :beamer_header "#+beamer_header:"
                     :attr_latex    "#+attr_latex:"
                     :attr_html     "#+attr_latex:"
                     :begin_quote   "#+begin_quote"
                     :end_quote     "#+end_quote"
                     :caption       "#+caption:"
                     :header        "#+header:"
                     :begin_export  "#+begin_export"
                     :end_export    "#+end_export"
                     :results       "#+RESULTS:"
                     :property      ":PROPERTIES:"
                     :end           ":END:"
                     :priority_a    "[#A]"
                     :priority_b    "[#B]"
                     :priority_c    "[#C]"
                     :priority_d    "[#D]"
                     :priority_e    "[#E]")
    (plist-put +ligatures-extra-symbols :name "⁍")
#+END_SRC

** Org Roam
For my [[https://github.com/DanielBiasiotto/braindump][braindump]].
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :init
  (setq org-roam-directory "~/Documents/org/roam"))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
  '(("t" "Todo" entry (file+headline todo-file-path "Tasks")
     "TODO %?  %^G \nSCHEDULED: %^t\n  %U")
    ("r" "To Be Read" entry (file "~/Documents/org/roam/Letture.org")
     "\n* TBR %?  %^G \n%U")
    ("j" "Bullet Journal" entry (file+olp+datetree journal-file-path)
     "** %<%H:%M> %?\n")
    ("r" "Roam"  entry (file org-roam-find-file) ;;capture-new-file non funge per qualche motivo
     "")))
#+END_SRC

** Hydra
Have a look at the [[https://github.com/abo-abo/hydra/wiki/][community wiki]]

_Movement Group_
#+BEGIN_SRC emacs-lisp
(global-set-key
 (kbd "C-n")
 (defhydra hydra-move
   (:body-pre (next-line))
   "move"
   ("n" next-line)
   ("p" previous-line)
   ("f" forward-char)
   ("b" backward-char)
   ("a" beginning-of-line)
   ("e" move-end-of-line)
   ("v" scroll-up-command)
   ;; Converting M-v to V here by analogy.
   ("V" scroll-down-command)
   ("l" recenter-top-bottom)))
#+END_SRC

_For interaction with a language server_ through ~lsp-mode~
#+BEGIN_SRC emacs-lisp
(defhydra hydra-lsp (:exit t :hint nil)
  "
 Buffer^^               Server^^                   Symbol
-------------------------------------------------------------------------------------
 [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
 [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
 [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
  ("d" lsp-find-declaration)
  ("D" lsp-ui-peek-find-definitions)
  ("R" lsp-ui-peek-find-references)
  ("i" lsp-ui-peek-find-implementation)
  ("t" lsp-find-type-definition)
  ("s" lsp-signature-help)
  ("o" lsp-describe-thing-at-point)
  ("r" lsp-rename)

  ("f" lsp-format-buffer)
  ("m" lsp-ui-imenu)
  ("x" lsp-execute-code-action)

  ("M-s" lsp-describe-session)
  ("M-r" lsp-restart-workspace)
  ("S" lsp-shutdown-workspace))
#+END_SRC

_Org-mode code-blocks_
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-org-template (:color blue :hint nil)
    "
 _c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
 _l_atex   _E_xample   _p_erl          _i_ndex:
 _a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
 _s_rc     _n_ote      plant_u_ml      _H_TML:
 _h_tml    ^ ^         ^ ^             _A_SCII:
"
    ("s" (hot-expand "<s"))
    ("E" (hot-expand "<e"))
    ("q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("n" (hot-expand "<not"))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<l"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("e" (hot-expand "<s" "emacs-lisp"))
    ("p" (hot-expand "<s" "perl"))
    ("u" (hot-expand "<s" "plantuml :file CHANGE.png"))
    ("P" (hot-expand "<s" "perl" ":results output :exports both :shebang \"#!/usr/bin/env perl\"\n"))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))

  (require 'org-tempo) ; Required from org 9 onwards for old template expansion
  ;; Reset the org-template expnsion system, this is need after upgrading to org 9 for some reason
  (setq org-structure-template-alist (eval (car (get 'org-structure-template-alist 'standard-value))))
  (defun hot-expand (str &optional mod header)
    "Expand org template.

STR is a structure template string recognised by org like <s. MOD is a
string with additional parameters to add the begin line of the
structure element. HEADER string includes more parameters that are
prepended to the element after the #+HEADER: tag."
    (let (text)
      (when (region-active-p)
        (setq text (buffer-substring (region-beginning) (region-end)))
        (delete-region (region-beginning) (region-end))
        (deactivate-mark))
      (when header (insert "#+HEADER: " header) (forward-line))
      (insert str)
      (org-tempo-complete-tag)
      (when mod (insert mod) (forward-line))
      (when text (insert text))))

  (define-key org-mode-map "<"
    (lambda () (interactive)
      (if (or (region-active-p) (looking-back "^"))
          (hydra-org-template/body)
        (self-insert-command 1))))

  (eval-after-load "org"
    '(cl-pushnew
    '("not" . "note")
      org-structure-template-alist))
#+END_SRC

_Org-agenda_ taken from Spacemacs
#+BEGIN_SRC emacs-lisp
  ;; Hydra for org agenda (graciously taken from Spacemacs)
  (defhydra hydra-org-agenda (:pre (setq which-key-inhibit t)
                                   :post (setq which-key-inhibit nil)
                                   :hint none)
    "
  Org agenda (_q_uit)

  ^Clock^      ^Visit entry^              ^Date^             ^Other^
  ^-----^----  ^-----------^------------  ^----^-----------  ^-----^---------
  _ci_ in      _SPC_ in other window      _ds_ schedule      _gr_ reload
  _co_ out     _TAB_ & go to location     _dd_ set deadline  _._  go to today
  _cq_ cancel  _RET_ & del other windows  _dt_ timestamp     _gd_ go to date
  _cj_ jump    _o_   link                 _+_  do later      ^^
  ^^           ^^                         _-_  do earlier    ^^
  ^^           ^^                         ^^                 ^^
  ^View^          ^Filter^                 ^Headline^         ^Toggle mode^
  ^----^--------  ^------^---------------  ^--------^-------  ^-----------^----
  _vd_ day        _ft_ by tag              _ht_ set status    _tf_ follow
  _vw_ week       _fr_ refine by tag       _hk_ kill          _tl_ log
  _vt_ fortnight  _fc_ by category         _hr_ refile        _ta_ archive trees
  _vm_ month      _fh_ by top headline     _hA_ archive       _tA_ archive files
  _vy_ year       _fx_ by regexp           _h:_ set tags      _tr_ clock report
  _vn_ next span  _fd_ delete all filters  _hp_ set priority  _td_ diaries
  _vp_ prev span  ^^                       ^^                 ^^
  _vr_ reset      ^^                       ^^                 ^^
  ^^              ^^                       ^^                 ^^
  "
    ;; Entry
    ("hA" org-agenda-archive-default)
    ("hk" org-agenda-kill)
    ("hp" org-agenda-priority)
    ("hr" org-agenda-refile)
    ("h:" org-agenda-set-tags)
    ("ht" org-agenda-todo)
    ;; Visit entry
    ("o"   link-hint-open-link :exit t)
    ("<tab>" org-agenda-goto :exit t)
    ("TAB" org-agenda-goto :exit t)
    ("SPC" org-agenda-show-and-scroll-up)
    ("RET" org-agenda-switch-to :exit t)
    ;; Date
    ("dt" org-agenda-date-prompt)
    ("dd" org-agenda-deadline)
    ("+" org-agenda-do-date-later)
    ("-" org-agenda-do-date-earlier)
    ("ds" org-agenda-schedule)
    ;; View
    ("vd" org-agenda-day-view)
    ("vw" org-agenda-week-view)
    ("vt" org-agenda-fortnight-view)
    ("vm" org-agenda-month-view)
    ("vy" org-agenda-year-view)
    ("vn" org-agenda-later)
    ("vp" org-agenda-earlier)
    ("vr" org-agenda-reset-view)
    ;; Toggle mode
    ("ta" org-agenda-archives-mode)
    ("tA" (org-agenda-archives-mode 'files))
    ("tr" org-agenda-clockreport-mode)
    ("tf" org-agenda-follow-mode)
    ("tl" org-agenda-log-mode)
    ("td" org-agenda-toggle-diary)
    ;; Filter
    ("fc" org-agenda-filter-by-category)
    ("fx" org-agenda-filter-by-regexp)
    ("ft" org-agenda-filter-by-tag)
    ("fr" org-agenda-filter-by-tag-refine)
    ("fh" org-agenda-filter-by-top-headline)
    ("fd" org-agenda-filter-remove-all)
    ;; Clock
    ("cq" org-agenda-clock-cancel)
    ("cj" org-agenda-clock-goto :exit t)
    ("ci" org-agenda-clock-in :exit t)
    ("co" org-agenda-clock-out)
    ;; Other
    ("q" nil :exit t)
    ("gd" org-agenda-goto-date)
    ("." org-agenda-goto-today)
    ("gr" org-agenda-redo))
#+END_SRC

_For pdf-tools_
#+BEGIN_SRC emacs-lisp
(defhydra hydra-pdftools (:color blue :hint nil)
        "
                                                                      ╭───────────┐
       Move  History   Scale/Fit     Annotations  Search/Link    Do   │ PDF Tools │
   ╭──────────────────────────────────────────────────────────────────┴───────────╯
         ^^_g_^^      _B_    ^↧^    _+_    ^ ^     [_al_] list    [_s_] search    [_u_] revert buffer
         ^^^↑^^^      ^↑^    _H_    ^↑^  ↦ _W_ ↤   [_am_] markup  [_o_] outline   [_i_] info
         ^^_p_^^      ^ ^    ^↥^    _0_    ^ ^     [_at_] text    [_F_] link      [_d_] dark mode
         ^^^↑^^^      ^↓^  ╭─^─^─┐  ^↓^  ╭─^ ^─┐   [_ad_] delete  [_f_] search link
    _h_ ←pag_e_→ _l_  _N_  │ _P_ │  _-_    _b_     [_aa_] dired
         ^^^↓^^^      ^ ^  ╰─^─^─╯  ^ ^  ╰─^ ^─╯   [_y_]  yank
         ^^_n_^^      ^ ^  _r_eset slice box
         ^^^↓^^^
         ^^_G_^^
   --------------------------------------------------------------------------------
        "
        ("\\" hydra-master/body "back")
        ("<ESC>" nil "quit")
        ("al" pdf-annot-list-annotations)
        ("ad" pdf-annot-delete)
        ("aa" pdf-annot-attachment-dired)
        ("am" pdf-annot-add-markup-annotation)
        ("at" pdf-annot-add-text-annotation)
        ("y"  pdf-view-kill-ring-save)
        ("+" pdf-view-enlarge :color red)
        ("-" pdf-view-shrink :color red)
        ("0" pdf-view-scale-reset)
        ("H" pdf-view-fit-height-to-window)
        ("W" pdf-view-fit-width-to-window)
        ("P" pdf-view-fit-page-to-window)
        ("n" pdf-view-next-page-command :color red)
        ("p" pdf-view-previous-page-command :color red)
        ("d" pdf-view-dark-minor-mode)
        ("b" pdf-view-set-slice-from-bounding-box)
        ("r" pdf-view-reset-slice)
        ("g" pdf-view-first-page)
        ("G" pdf-view-last-page)
        ("e" pdf-view-goto-page)
        ("o" pdf-outline)
        ("s" pdf-occur)
        ("i" pdf-misc-display-metadata)
        ("u" pdf-view-revert-buffer)
        ("F" pdf-links-action-perfom)
        ("f" pdf-links-isearch-link)
        ("B" pdf-history-backward :color red)
        ("N" pdf-history-forward :color red)
        ("l" image-forward-hscroll :color red)
        ("h" image-backward-hscroll :color red))
#+END_SRC
Magit
#+begin_src emacs-lisp
(defhydra yt-hydra/help (:color blue :hint nil)
  "
_mp_ magit-push #_mc_ magit-commit #_md_ magit diff #_mla_ magit diff #_mla_ magit status
"
  ;;Magit part
  ("mp" magit-push)
  ("mc" magit-commit)
  ("md" magit-diff)
  ("mla" magit-log-all)
  ("ms" magit-status)
  )
(global-set-key (kbd "<f1>") 'yt-hydra/help/body)
#+end_src


** Projectile
For managing projects.
#+BEGIN_SRC emacs-lisp
;; Projectile
(use-package projectile
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :config
  (projectile-mode +1))
#+END_SRC

** Which-Key
Can't remember all the keybindings thanks.
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init
  ;(which-key-setup-side-window-right)
  (setq which-key-use-C-h-commands nil
    which-key-idle-delay 2.0
    which-key-popup-type 'minibuffer)
  :bind
  (:map which-key-mode-map
    ("C-x h" . which-key-C-h-dispatch)
    ("C-c M-h" . which-key-C-h-dispatch)))
(require 'which-key)
(which-key-mode)
#+END_SRC

** Deft
Fast and efficient
#+BEGIN_SRC emacs-lisp
(use-package deft
  :after org
  :bind
  ("C-c d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory))
#+END_SRC

** PDF and EPUB support
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
      :ensure t
      :config
      (pdf-tools-install)
      (setq-default pdf-view-display-size 'fit-page)
      (bind-keys :map pdf-view-mode-map
          ("\\" . hydra-pdftools/body)
          ("<s-spc>" .  pdf-view-scroll-down-or-next-page)
          ("g"  . pdf-view-first-page)
          ("G"  . pdf-view-last-page)
          ("l"  . image-forward-hscroll)
          ("h"  . image-backward-hscroll)
          ("j"  . pdf-view-next-page)
          ("k"  . pdf-view-previous-page)
          ("e"  . pdf-view-goto-page)
          ("u"  . pdf-view-revert-buffer)
          ("al" . pdf-annot-list-annotations)
          ("ad" . pdf-annot-delete)
          ("aa" . pdf-annot-attachment-dired)
          ("am" . pdf-annot-add-markup-annotation)
          ("at" . pdf-annot-add-text-annotation)
          ("y"  . pdf-view-kill-ring-save)
          ("i"  . pdf-misc-display-metadata)
          ("s"  . pdf-occur)
          ("b"  . pdf-view-set-slice-from-bounding-box)
          ("r"  . pdf-view-reset-slice))
       ;(use-package org-pdfview
       ;  :ensure t)
      )
#+END_SRC
For =EPUB= I use ~nov.el~
Open the EPUB file with C-x C-f ~/novels/novel.epub,
scroll with SPC and switch chapters with n and p.
More keybinds can be looked up with F1 m.

#+begin_src emacs-lisp
(defun my-nov-font-setup ()
   (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                            :height 1.0))
(use-package nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  :hook
  (nov-mode-hook . my-nov-font-setup))
#+end_src

* Babel Tangle on Save
Tangle on Save? Reload?
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
